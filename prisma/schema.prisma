// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement()) @db.TinyInt
  name      String   @db.VarChar(50)
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Role")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  cuil      String?  @db.VarChar(20)
  active    Boolean  @default(true)
  roleId    Int      @db.TinyInt
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  client        Client?
  boss          Boss?
  mechanic      Mechanic?
  admin         Admin?
  recepcionista Recepcionista?
  notifications Notification[]

  @@map("User")
}

model Client {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  cars      Car[]
  payments  Payment[]
  serviceRequests ServiceRequest[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Client")
}

model Boss {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  mechanics Mechanic[]
  serviceRequests ServiceRequest[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("Boss")
}

model Admin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Admin")
}

model Recepcionista {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Recepcionista")
}

model Mechanic {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  bossId    Int?
  boss      Boss?    @relation(fields: [bossId], references: [id])
  cars      Car[]
  repairs   Repair[]
  preferredServiceRequests ServiceRequest[] @relation("PreferredMechanic")
  assignedServiceRequests ServiceRequest[] @relation("AssignedMechanic")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Mechanic")
}

model CarStatus {
  id      Int      @id @default(autoincrement()) @db.TinyInt
  name    String   @db.VarChar(50)
  cars    Car[]
  repairs Repair[]

  @@unique([name])

  @@map("CarStatus")
}

model Car {
  id           Int        @id @default(autoincrement())
  clientId     Int
  client       Client     @relation(fields: [clientId], references: [id])
  mechanicId   Int?
  mechanic     Mechanic?  @relation(fields: [mechanicId], references: [id])
  licensePlate String     @unique @db.VarChar(20)
  brand        String     @db.VarChar(50)
  model        String     @db.VarChar(50)
  year         Int        @db.SmallInt
  kms          Int
  chassis      String     @db.VarChar(17)
  statusId     Int        @default(1) @db.TinyInt
  status       CarStatus  @relation(fields: [statusId], references: [id])
  repairs      Repair[]
  serviceRequests ServiceRequest[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("Car")
}

model Repair {
  id          Int        @id @default(autoincrement())
  carId       Int
  car         Car        @relation(fields: [carId], references: [id])
  mechanicId  Int
  mechanic    Mechanic   @relation(fields: [mechanicId], references: [id])
  statusId    Int        @default(1) @db.TinyInt
  status      CarStatus  @relation(fields: [statusId], references: [id])
  description String     @db.Text
  cost        Decimal    @db.Decimal(10, 2)
  warranty    Int        @default(90)
  payments    Payment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("Repair")
}

model Payment {
  id         Int      @id @default(autoincrement())
  repairId   Int
  repair     Repair   @relation(fields: [repairId], references: [id])
  clientId   Int
  client     Client   @relation(fields: [clientId], references: [id])
  amount     Decimal  @db.Decimal(10, 2)
  method     String   @db.VarChar(50)
  status     String   @default("PENDIENTE") @db.VarChar(50)
  externalId String?  @db.VarChar(255) // MercadoPago preference ID
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("Payment")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String   @db.Text
  readFlag  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Notification")
}

model ServiceRequest {
  id                   Int       @id @default(autoincrement())
  carId                Int
  car                  Car       @relation(fields: [carId], references: [id])
  clientId             Int
  client               Client    @relation(fields: [clientId], references: [id])
  preferredMechanicId  Int?
  preferredMechanic    Mechanic? @relation("PreferredMechanic", fields: [preferredMechanicId], references: [id])
  assignedBossId       Int?
  assignedBoss         Boss?     @relation(fields: [assignedBossId], references: [id])
  assignedMechanicId   Int?
  assignedMechanic     Mechanic? @relation("AssignedMechanic", fields: [assignedMechanicId], references: [id])
  description          String    @db.Text
  status               String    @db.VarChar(30) // PENDING, ASSIGNED, IN_PROGRESS, COMPLETED (mapeado a pendiente/en reparacion/finalizado en UI)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("ServiceRequest")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("PasswordReset")
}